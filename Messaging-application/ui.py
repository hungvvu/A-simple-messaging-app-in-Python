# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, QMetaObject, Qt
from PyQt5.QtWidgets import QInputDialog
from client import *

import constants
    
# a class for the chat text box where user enter their message in
class TextBox(QtWidgets.QPlainTextEdit):
    # signal for dectecting when the enter key is pressed
    enter_pressed = pyqtSignal()

    def keyPressEvent(self, event):
        if event.key() == QtCore.Qt.Key_Return:
            self.enter_pressed.emit()
        elif event.key() == QtCore.Qt.Key_Enter:
            self.enter_pressed.emit()
        else:
            super().keyPressEvent(event)


# a class for the input diaglog for creating group chat
class CreateGroupChatDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        
        self.setWindowTitle("Adding new groupchat")
        
        # Create the input fields
        self.name_label = QtWidgets.QLabel("Group name: ")
        self.name_input = QtWidgets.QLineEdit()
        self.list_label = QtWidgets.QLabel("Member list (use ';' to separate usernames): ")
        self.list_input = QtWidgets.QLineEdit()
        
        # Create the layout
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.name_label)
        layout.addWidget(self.name_input)
        layout.addWidget(self.list_label)
        layout.addWidget(self.list_input)
        self.setLayout(layout)
        
        # Add buttons
        self.buttons = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel,
            QtCore.Qt.Horizontal, self)
        self.buttons.accepted.connect(self.accept)
        self.buttons.rejected.connect(self.reject)
        layout.addWidget(self.buttons)


class Ui_Dialog(object):
    def __init__(self):
        # initialize the client
        my_username, ok = QInputDialog.getText(None, "Enter your username", "Username: ")
        if ok:
            self.client = Client(constants.IP, constants.PORT, my_username)
            self.client.text_message_received.connect(self.update_chatbox) # connect the text_ceived signal to the handling function

            # Start client in a separate thread
            self.client_thread = QThread()
            self.client.moveToThread(self.client_thread)
            self.client_thread.start()
            QMetaObject.invokeMethod(self.client, 'run', Qt.QueuedConnection)

        # create class member variables
        self.active_convo = '' # the currently active conversation
        

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(874, 628)
        Dialog.setMinimumSize(QtCore.QSize(874, 628))
        Dialog.setMaximumSize(QtCore.QSize(874, 628))
        self.TextBox = TextBox(Dialog)
        self.TextBox.setGeometry(QtCore.QRect(220, 580, 601, 51))
        self.TextBox.setObjectName("TextBox")
        self.textBrowser = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser.setGeometry(QtCore.QRect(220, 0, 661, 581))
        self.textBrowser.setObjectName("textBrowser")
        self.verticalLayoutWidget = QtWidgets.QWidget(Dialog)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 221, 631))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")

        # create button for adding new conversation
        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_2.setObjectName("--New Conversation--")

        self.verticalLayout.addWidget(self.pushButton_2)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(820, 580, 61, 51))
        self.pushButton.setObjectName("pushButton")

        # connect signals to slots
        self.pushButton.clicked.connect(self.clicked_send)
        self.pushButton_2.clicked.connect(self.show_new_convo_menu)
        self.TextBox.enter_pressed.connect(self.clicked_send)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", f"{self.client.my_username} - Gnirob messaging"))
        self.textBrowser.setFontPointSize(15)
        
        self.pushButton_2.setText(_translate("Dialog", "--New Conversation--"))
        self.pushButton.setText(_translate("Dialog", ">>"))



    ## slots ##

    def clicked_send(self):
        message = self.TextBox.toPlainText() # saved the inputed message
        # if the message box is not empty
        if message and self.active_convo:
            self.TextBox.setPlainText("") # clear the text box

            # make a timestamp from the current time
            timestamp = datetime.datetime.now().strftime("%H:%M")

            self.textBrowser.append(f"[{timestamp}, You] > {message}")
            # target_username, ok = QInputDialog.getText(None, "Send message to", "Target's username: ")
            # if ok:
            self.client.send_txt_to(self.active_convo, message)


    def update_chatbox(self, message):
        self.textBrowser.append(message)


    def show_new_convo_menu(self):
        menu = QtWidgets.QMenu(self.pushButton_2)
        
        action1 = menu.addAction("Direct message")
        action2 = menu.addAction("Group message")
        
        action1.triggered.connect(self.add_new_convo)
        action2.triggered.connect(self.add_new_group_convo)
        
        menu.exec_(QtGui.QCursor.pos())

    # for adding new direct messages conversations
    def add_new_convo(self):
        newConvo = QtWidgets.QPushButton(self.verticalLayoutWidget)
        target_username, ok = QInputDialog.getText(None, "Adding new conversation", "Target's username: ")

        if ok:
            # create new button for the added conversation
            # self.pushButton_2.setObjectName(target_username)
            self.verticalLayout.insertWidget(self.verticalLayout.indexOf(self.pushButton_2), newConvo)
            newConvo.setText(target_username)

            newConvo.clicked.connect(lambda: self.chosen_conversation(target_username, newConvo)) # connect the button with the signal for choosing conversations and pass in the target username

            # save the new conversation on the client side
            self.client.add_convo(target_username, {target_username})
    
    def add_new_group_convo(self):
        createGroupDialog = CreateGroupChatDialog()
        result = createGroupDialog.exec_()

        if result == QtWidgets.QDialog.Accepted:
            group_name = createGroupDialog.name_input.text()
            member_list_raw = createGroupDialog.list_input.text()

            try:
                member_set = set(member_list_raw.split(';')) # parse the usernames

                if group_name and member_set:
                    newConvo = QtWidgets.QPushButton(self.verticalLayoutWidget)

                    # create new button for the added conversation
                    # self.pushButton_2.setObjectName(target_username)
                    self.verticalLayout.insertWidget(self.verticalLayout.indexOf(self.pushButton_2), newConvo)
                    newConvo.setText(group_name)

                    newConvo.clicked.connect(lambda: self.chosen_conversation(group_name, newConvo)) # connect the button with the signal for choosing conversations and pass in the target username

                    # save the new conversation on the client side
                    self.client.add_convo(group_name, member_set)
            
            except ValueError as e:
                QtWidgets.QMessageBox.warning(None, 'Error', str(e))

    def chosen_conversation(self, target_username, button):
        self.clear_layout_color()
        button.setStyleSheet("background-color: DarkOliveGreen")
        self.active_convo = target_username
    
    # for clearing all color of the widgets in the layout
    def clear_layout_color(self):
        for i in range(self.verticalLayout.count()):
            currWid = self.verticalLayout.itemAt(i).widget()
            if currWid:
                currWid.setStyleSheet("")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle('Fusion')
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
